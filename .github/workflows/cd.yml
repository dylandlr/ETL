name: CD

on:
  push:
    branches: [ main ]
    paths:
      - 'azure/**'
      - '.github/workflows/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production

env:
  PYTHON_VERSION: '3.9'
  TERRAFORM_VERSION: '1.0.0'
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  AZURE_FUNCTIONAPP_PACKAGE_PATH: './azure/functions'

permissions:
  contents: read
  id-token: write
  issues: write

jobs:
  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'development' }}
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}
        
    - name: Azure Login
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        
    - name: Terraform Init
      run: |
        cd azure/infrastructure/environments/${{ github.event.inputs.environment || 'dev' }}
        terraform init \
          -backend-config="resource_group_name=${{ secrets.TERRAFORM_STORAGE_RG }}" \
          -backend-config="storage_account_name=${{ secrets.TERRAFORM_STORAGE_ACCOUNT }}" \
          -backend-config="container_name=terraform-state" \
          -backend-config="key=${{ github.event.inputs.environment || 'dev' }}.tfstate"
        
    - name: Terraform Plan
      run: |
        cd azure/infrastructure/environments/${{ github.event.inputs.environment || 'dev' }}
        terraform plan -out=tfplan \
          -var="environment=${{ github.event.inputs.environment || 'dev' }}" \
          -var="resource_group_name=${{ secrets.AZURE_RESOURCE_GROUP }}" \
          -var="location=${{ secrets.AZURE_LOCATION }}"
        
    - name: Terraform Apply
      run: |
        cd azure/infrastructure/environments/${{ github.event.inputs.environment || 'dev' }}
        terraform apply -auto-approve tfplan

  deploy-data-factory:
    name: Deploy Data Factory Resources
    needs: deploy-infrastructure
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'development' }}
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Azure Login
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        
    - name: Deploy Data Factory
      uses: Azure/arm-deploy@v1
      with:
        scope: resourcegroup
        resourceGroupName: ${{ secrets.AZURE_RESOURCE_GROUP }}
        template: azure/src/data-factory/ARMTemplateForFactory.json
        parameters: azure/src/data-factory/ARMTemplateParametersForFactory.json

  deploy-functions:
    name: Deploy Azure Functions
    needs: deploy-infrastructure
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'development' }}
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Azure Login
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}/requirements.txt
        
    - name: Azure Functions Action
      uses: Azure/functions-action@v1
      with:
        app-name: ${{ secrets.AZURE_FUNCTION_APP_NAME }}
        package: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}
        scm-do-build-during-deployment: true
        enable-oryx-build: true

  integration-tests:
    name: Run Integration Tests
    needs: [deploy-data-factory, deploy-functions]
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'development' }}
    if: github.event.inputs.environment != 'production'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r azure/tests/requirements-test.txt
        
    - name: Run integration tests
      run: |
        pytest azure/tests/integration -v
      env:
        AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
        LOCATION: ${{ secrets.AZURE_LOCATION }}

  notify:
    name: Create Deployment Report
    needs: [deploy-infrastructure, deploy-data-factory, deploy-functions, integration-tests]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Create GitHub Issue on Failure
      if: contains(needs.*.result, 'failure')
      uses: actions/github-script@v6
      with:
        script: |
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Deployment Failed: ${context.workflow} to ${process.env.ENVIRONMENT}`,
            body: `Deployment to ${process.env.ENVIRONMENT} environment failed.
            
            Workflow run: ${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}
            
            Job Status:
            - Infrastructure: ${needs.deploy-infrastructure.result}
            - Data Factory: ${needs.deploy-data-factory.result}
            - Functions: ${needs.deploy-functions.result}
            - Integration Tests: ${needs.integration-tests.result}
            `
          });
      env:
        ENVIRONMENT: ${{ github.event.inputs.environment || 'development' }}
